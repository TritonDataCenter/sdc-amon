# restart

- work through use cases
- update api
- update doc
- update the schedule
- tack on amon records to ufds/tools/genldif

# todo

- agent updating config from relay
- agent processing probes
* * *
- agent: ensure using cached probe data on agent restart?
- refactor logscan.js
- add "user" and "monitor" fields to probe data response in master
- probe plugins: validateConfig -> validateData
- agent sending events
- relay -D/--data-dir and create subdir
- relay passing on events
- switch relay over to using relay-client instead of master-client.
- master receiving events
- master notification plugins working
- rm "joyent" from relay/agent dirs and socket paths
- disallow '/' in name fields (so can use that as sep char for a string id).
  If this isn't acceptable then update id'ification in agent.
  Perhaps ':' would be preferable for id'ification? Meh.
- caching on ufds hits
- kill amon-common/constants.js:
    - separate ApiVersion btwn components. Because we should be able to
      use 'x-api-version:1' on the wire to have an older agent talk to
      a newer master.
- name fields in Master API: percent escaping

# someday/maybe

- amon-relay just fails mostly silently if given agents-probes-dir doesn't exist:
      [15:40:37 trentm@banana:~/joy/amon/relay (ufds)]
      $ ../deps/node-install/bin/node main.js -v -d -D tmp/db -m http://127.0.0.1:8080 -s 8081 -p 90
      2011-11-10 23:40:43Z DEBUG: Checking master for new agent probes.
      2011-11-10 23:40:43Z DEBUG: Starting new amon-relay for global zone at "8081" (owner=joyent).
      2011-11-10 23:40:43Z WARN: unable to create staging area tmp/db/global: Error: ENOENT, No such file or directory 'tmp/db/global'
      2011-11-10 23:40:43Z DEBUG: Starting app on port 8081 (developer mode)
      2011-11-10 23:40:43Z INFO: Amon-relay listening in global zone at 8081.
      2011-11-10 23:40:43Z WARN: Unable to save new agent probes: Error: ENOENT, No such file or directory 'tmp/db/.6d617f32-4062-4bab-aa15-dfcf8f9e7113'
      2011-11-10 23:40:43Z INFO: Successfully updated agent probes from master (zone: global, md5: undefined -> UaTV7YW3MTyNMX+uguZZZw==).
- JSON api summary at "GET /"
- HTML docs at "GET /docs"


# use case: operator wants an alert for every zone fault

- FMA-based check in amon-agent in all CN GZs
  Q: Ask rm how to trigger that FMA event.
- Q: Exclude explicit reboots? What about an explicit reboot, but it doesn't
  come back up?
  A: Yes, exclude for now.
- Q: how to handle clearing an alarm. Does FMA give me an event for that?
  Ditto for non-fma-based zone status watching? Are we going to send an
  amon event for *every* zone running state every minute? No way.



# smartos event streams notes

- sysevent: core element, syseventadm
  https://mo.joyent.com/source/xref/illumos-joyent/usr/src/lib/libsysevent/libsysevent.c#2653
    sysevent_subscribe_event
  Note that zonecfg_notify_* itself calls a slightly different "sysevent_evc_subscribe":
    https://mo.joyent.com/source/xref/illumos-joyent/usr/src/lib/libsysevent/libevchannel.c#566
    https://mo.joyent.com/source/xref/illumos-joyent/usr/src/lib/libzonecfg/common/libzonecfg.c#6692
- zonecfg_notify_bind: uses sysevent, might not need that
  defined here: illumos/usr/src/lib/libzonecfg/common/libzonecfg.c
- fma:
  fmdump
  FMA: http://hub.opensolaris.org/bin/download/Community+Group+fm/WebHome/FMDPRM.pdf
  http://download.oracle.com/docs/cd/E19082-01/819-3196/6n5ed4h40/index.html#indexterm-289
  fminject to test
  


# TODOs for MVP

- Build/install (usb-headnode, bamboo, mountain-gorilla):
  - riak: discuss with others if separate riak clusters for separate apps
    or one shared one? billing/amon/hostrouter(?)/capi
  - master
  - relay (SMF packaging done; bamboo started)
  - agent
  - package.json: get specific about included versions
- Email Notification Plugin
- Retry/backoff everywhere: Restify-client supports everything needed here?
- event on zone/vm transitions: use zwatch
  - what does it mean to design to have events coming NOT from amon-agent
- Garbage collection of /events and orphans
- in riak, use uuid instead of customer_name for keys, if possible
- load testing (hook into mock cloud for this?)
  - estimate of design-limit on number of watches/notifications/events
  - e.g., what would it be on no.de
  - capacity planning:
    - http://wiki.basho.com/Cluster-Capacity-Planning.html
    - shared riak cluster with billing and ufds
    - http://wiki.basho.com/Bitcask-Capacity-Planning.html
- upgrade plan and testing
  - versioning (see ca/Makefile, and 1.0.0 instead of 6.1)
  - config handling
- headnode GZ cronjob that emails the /usbkey/config'd admin if amon and/or
  redis zones are down themselves.
- redis zone config: have "save 60 1". Make sure that isn't filling up disk
  with lots of snapshots. I *presume* this is just one or two files on
  disk, but should check.
- test: test how events are handled when redis runs out of memory
  Might want "maxmemory" and "maxmemory-policy ..." or "vm-enabled yes" in
  redis.conf


# Trent's scratch area

- upgrade deps/node and deps/npm versions to latest
- faking an event (calling Relay API):
    $ bin/amon-relay-api /events -X POST -d @-
    {"check":"joyent_whistle","status":"error","metrics":{"name":"amon:logscan","type":"Integer","value":2,"data":{"match":"i hear a tweet from someone"}}}
    ^D
- too much noise in the log: can't have the logs grow this fast
  don't log normal "HEAD /config" hits
- suppressing some zone transition events: How?
  - the start + reboot for zone provisioning:
    - talk with Orlando about a "ready" zoneconfig var set by provisioner
  - the stop/start of an intentional reboot (by an operator at the GZ
    command line)
    - sdc-amon-suppress ...   # or some command line that
  - intentional reboot or shutdown in adminui
    - either adminui or mapi's shutdown/reboot command would call Amon
      API to suppress?
    - or this is a separate action in adminui to manually suppress
  - intentional reboot or shutdown in portal/cloudapi
    - if MAPI above, then this is done.
  - intentional reboot of the *compute node* for maintenance by operator
    - sdc-amon-suppress command, and/or equivalent in adminui UI.
  - sdc-amon-suppress:
    - one shot?
    - toggle?
    - what is scope? Low-level: per zone name and per monitor name. Optionally
      just per monitor name for all applicable zones?
        "Suppress this monitor [until enabled again later]."
        "Suppress this monitor for machines X, Y and Z."
        "Suppress all monitors for machines X, Y and Z."
      Or is this only about suppressing *alarms*? I.e. only at the master-level.
      Yes.
        "Suppress alarms for monitors M and N [until enabled again later]."
        "Suppress alarms for monitor M for N for machines X, Y, and Z."
        "... for the next hour."
      general:
        "Suppress alarms
          for monitors M and N (or all)
          for machines X, Y and Z (or all)
          for a certain amount of time (or until re-enabled)."
        
- running on smartos global zone:
  devrun.sh: USE_ZSOCK=1
- /config -> /zonechecks
- use "/customers" prefix instead of "/pub" for Master API.
  


# Post-6.5 TODOs and RFEs

- CA Agent Plugin
- HTTP Agent Plugin
- revive twillio notification backend as "sms"
- Default to CAPI lookup user email on no contacts
- missing data alarms in master: ???
- edge-triggered alarms in master for checks: ???
- /events cleanup (look like other master apis)
- client SDK
- s/joyent/sdc/ in various runtime files and dirs
- Admin UI
- amon client: just integrate into node-smartdc?
- snmp (MarkC: "snmp traps". Me: What's that?)
- Interesting services for hooking into. Messaging services that might be useful:
    - http://aws.amazon.com/cloudwatch/
    - https://www.cloudkick.com/
    - http://www.splunk.com/
    - http://www.pagerduty.com/
