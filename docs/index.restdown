---
title: Amon (SDC Monitoring and Alarming)
markdown2extras: wiki-tables
apisections: Master API: Monitors, Master API: Probes, Master API: Alarms, Master API: Miscellaneous, Relay API
---

# Amon (SDC Monitoring and Alarming)

*Note: This document is intended for an SDC operator or developer. End-user
docs for SDC monitoring and alarming are part of the Cloud API
documentation.*

Amon is a monitoring and alarming system for SmartDataCenter (SDC). It has
three components: a central master, a relay agent ("amon relay") in each
node global zone agents ("amon agent") in global zones and, eventually, in
customer zones and guest VMs. **Monitors** (grouping of probes and contacts)
and **probes** (things to check and alarm on) are configured on the master
(i.e. on the "Amon Master API"). Probe data is passed from the master, via
the relays to the appropriate agent where the probe is run. When a probe
fails/trips it raises and event, which passes through the relays up to the
master. The master handles events by creating or updating **alarms** and
sending notifications to the configured contacts, if appropriate (suppression
and de-duplication rules can mean a notification is not always sent). Contact
info lives with the user account in UFDS.

For external users (i.e. anyone other than an Amon developer), it is the Amon
Master API (or "Amon API" for short) that is most relevant. This document
also describes the (internal) Relay API.

Public endpoints of the Amon Master API are under a "/pub" prefix to
facilitate proxying to Cloud API. For example, the set of open alarms for an
user is:

    GET  /pub/:user/monitors           # Amon Master API
    GET  /:login/monitors              # Cloud API

Where ":user" is typically a user UUID. However, for convenience in
development, ":user" may also be a user's login string.

**Warning: Amon does no authorization (or authentication). That's up to Cloud
API.**


### Error Responses

If you get back any error code in the 4xx range, you will receive a formatted
error message of the scheme:

    {
      "code": "CODE",
      "message": "human readable string"
    }

Where the code element is one of:

* InvalidArgument
* InvalidHeader
* MissingParameter
* RequestTooLarge
* ResourceNotFound
* UnknownError
* any of the errors from <http://ldapjs.org/errors.html>

Clients are expected to check HTTP status code first, and if in the 4xx range,
they can leverage the codes above.

TODO: complete the error list above, show some examples



# Master API: Monitors

A monitor is the primary object for defining what and how to monitor and
who should be notified on alarms. A monitor holds a reference to
contacts to notify. A set of probes to run (e.g. check for N occurrences of
"ERROR" in "/var/foo/bar.log" in a minute) are added to a monitor.

## ListMonitors (GET /pub/:user/monitors)

List all monitors for this user.

### Inputs

None.

### Returns

An array of monitor objects. Keys are:

||name||String||Name of this monitor. This is the unique identifier for this monitor. It must be 1-32 chars, begin with alpha character and include only alphanumeric '_', '.' and '-' ||
||contacts||Array||Set of contact names that are to be notified when this monitor alarms.||

### Errors

TODO

### Example

    $ sdc-amon /pub/hamish/monitors
    HTTP/1.1 200 OK
    Connection: close
    Date: Tue, 08 Nov 2011 00:38:54 GMT
    Server: Amon Master/1.0.0
    X-Api-Version: 1.0.0
    X-Request-Id: addcc1ab-cdd2-4961-b4f8-b44a7ab2a31a
    X-Response-Time: 491
    Content-Length: 42
    Content-MD5: 3/3Q0/Mz/37AHee5JHHJ1Q==
    Content-Type: application/json
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Methods: OPTIONS, GET
    Access-Control-Allow-Headers: Accept, Content-Type, Content-Length, Date, X-Api-Version
    Access-Control-Expose-Headers: X-Api-Version, X-Request-Id, X-Response-Time

    [
      {
        "name": "mysql",
        "contacts": [
          "cellPhone"
        ]
      }
    ]


## GetMonitor (GET /pub/:user/monitors/:monitor)

TODO

## PutMonitor (PUT /pub/:user/monitors/:monitor)

TODO

## DeleteMonitor (DELETE /pub/:user/monitors/:monitor)

TODO



# Master API: Probes

A monitor has one or more probes. A "probe" is a single thing to check
or watch for.

## ListProbes (GET /pub/:user/monitors/:monitor/probes)

TODO

### Example

    $ sdc-amon /pub/hamish/monitors/whistle/probes
    HTTP/1.1 200 OK
    Connection: close
    Date: Tue, 22 Nov 2011 17:59:22 GMT
    Server: Amon Master/1.0.0
    X-Api-Version: 1.0.0
    X-Request-Id: c92e87c6-8da1-4f67-b85e-f4458340642b
    X-Response-Time: 760
    Content-Length: 407
    Content-MD5: 5EdOGXW+sKRtRajFf+ajkw==
    Content-Type: application/json
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Methods: OPTIONS, GET
    Access-Control-Allow-Headers: Accept, Content-Type, Content-Length, Date, X-Api-Version
    Access-Control-Expose-Headers: X-Api-Version, X-Request-Id, X-Response-Time

    [
      {
        "name": "whistlelog",
        "user": "7b23ae63-37c9-420e-bb88-8d4bf5e30455",
        "monitor": "whistle",
        "machine": "global",
        "type": "logscan",
        "config": {
          "path": "/tmp/whistle.log",
          "regex": "tweet",
          "threshold": 2,
          "period": 60
        }
      },
      {
        "name": "whistlelog2",
        "user": "7b23ae63-37c9-420e-bb88-8d4bf5e30455",
        "monitor": "whistle",
        "machine": "global",
        "type": "logscan",
        "config": {
          "path": "/tmp/whistle2.log",
          "regex": "tweet",
          "threshold": 1,
          "period": 60
        }
      }
    ]


## PutProbe (PUT /pub/:user/monitors/:monitor/probes/:probe)

TODO

## GetProbe (GET /pub/:user/monitors/:monitor/probes/:probe)

TODO

## DeleteProbe (DELETE /pub/:user/monitors/:monitor/probes/:probe)

TODO



# Master API: Alarms

An alarm is an occurence of a problem situation. Typically an alarm is
associated with a particular monitor. An alarm is opened when one of the
monitor's probes trips. Some probe types (e.g. "machine-up") support
clearing alarms automatically (e.g. when a machine being watched by a
"machine-up" probe comes back up after having been down, it will clear
the alarm for it having been down). Other alarms need to be explicitly
closed.

These APIs provide info on recent alarms for a user. Closed alarms are
only guaranteed to be persisted for a week. I.e. this is mainly about showing
open (i.e. unresolved) alarm situations.

The point of an "alarm" object is (a) to have a persistent object to show
current open alarms (e.g. for Cloud API, Operator Portal and Customer Portal);
(b) for the master to handle de-duplication, i.e. avoid a flood
of duplicate notifications for a stream of events relating to the same
problem; and (c) to support the user suppressing notifications for this
alarm ("Yah, I know it is a problem, but I can't deal with it right now.").



### Alarm Fields

||**Field**||**Type**||**Description**||
||user||String||The UUID of the user to which this alarm belongs.||
||id||Integer||The integer ID of this alarm. Note that this is scoped on `user`.||
||monitor||String||The name of the monitor with which this alarm is associated.||
||closed||Boolean||Whether this alarm has been closed.||
||suppressed||Boolean||Whether notifications for this alarm are currently suppressed.||
||timeOpened||Integer||Timestamp (milliseconds since the epoch) at which the alarm was opened.||
||timeClosed||Integer||Timestamp (milliseconds since the epoch) at which the alarm was closed.||
||timeLastEvent||Integer||Timestamp (milliseconds since the epoch) at which the last event for this alarm occurred.||
||v||Integer||The version of this Alarm object schema. Currently this is only exposed via the internal APIs.||

An example alarm:

    {
      "user": "deadbeef-5555-5555-5555-555555555555",
      "id": "1",
      "monitor": "isup",
      "closed": false,
      "timeOpened": 1332870155860,
      "timeClosed": null,
      "timeLastEvent": 1332870615162,
      "numNotifications": 0,
      "v": 1
    }


## ListAllAlarms (GET /alarms)

An **internal** API for listing and searching all alarms. This is intended
for operators and development/debugging only. In a heavily loaded system care
should be taken with this endpoint to not swamp the Amon Master.

### Inputs

None.

### Errors

For all possible errors, see [Error Response](#error-responses) above.

### Returns

Returns an array of alarms (see [Alarm Fields](#alarm-fields) above).

### Example

    $ sdc-amon /alarms
    HTTP/1.1 200 OK
    ...

    [
      {
        "user": "deadbeef-5555-5555-5555-555555555555",
        "id": "1",
        "monitor": "isup",
        "closed": false,
        "timeOpened": 1332870155860,
        "timeClosed": null,
        "timeLastEvent": 1332870615162,
        "numNotifications": 0,
        "v": 1
      }
    ]


## ListAlarms (GET /pub/:user/alarms)

List a users alarms. By default this is the set of open alarms and recently
closed (in the last hour) alarms, if any. Note that old closed alarms are
automatically expunged (currently a week after being closed).

### Inputs

||**Field**||**Type**||**Description**||
||user (in URL)||String||The user UUID (from UFDS) or username ('login' in UFDS)||
||state||String||One of "recent" (open and recently closed alarms, this is the default), "open" and "closed".||
||monitor||String||Only return alarms associated with this monitor.||

### Errors

For all possible errors, see [Error Response](#error-responses) above.

||**Error Code**||**HTTP Code**||**Description**||
||InvalidArgumentError||400||If `state` or `monitor` is invalid.||

### Returns

Returns an array of alarms (see [Alarm Fields](#alarm-fields) above).

### Example

    $ sdc-amon /pub/bob/alarms?state=open
    HTTP/1.1 200 OK
    ...

    [
      {
        "user": "deadbeef-5555-5555-5555-555555555555",
        "id": "1",
        "monitor": "isup",
        "closed": false,
        "timeOpened": 1332870155860,
        "timeClosed": null,
        "timeLastEvent": 1332870615162,
        "numNotifications": 0,
        "v": 1
      }
    ]


## GetAlarm (GET /pub/:user/alarms/:alarm)

Get a particular alarm.

### Inputs

||**Field**||**Type**||**Description**||
||user (in URL)||String||The user UUID (from UFDS) or username ('login' in UFDS)||
||alarm (in URL)||Integer||The alarm id for this user.||

### Returns

An alarm object (see [Alarm Fields](#alarm-fields) above).

### Errors

For all possible errors, see [Error Response](#error-responses) above.

||**Error Code**||**HTTP Code**||**Description**||
||ResourceNotFound||404||If `user` does not exist or the `alarm` id does not exist.||
||Gone||410||If the `alarm` has been expunged. Closed alarms are expunged after about a week.||

### Example

    $ sdc-amon /pub/bob/alarms/1
    HTTP/1.1 200 OK
    ...

    {
      "user": "deadbeef-5555-5555-5555-555555555555",
      "id": "1",
      "monitor": "isup",
      "closed": false,
      "timeOpened": 1332870155860,
      "timeClosed": null,
      "timeLastEvent": 1332870615162,
      "numNotifications": 0,
      "v": 1
    }


## CloseAlarm (POST /pub/:user/alarms/:alarm?action=close)

Close the given alarm.

### Inputs

||**Field**||**Type**||**Description**||
||user (in URL)||String||The user UUID (from UFDS) or username ('login' in UFDS)||
||alarm (in URL)||Integer||The alarm id for this user.||
||action||String||"close". See other "*Alarm*" actions in this section.||

### Returns

Nothing. Responds with an HTTP 202 (Accepted) on success.

### Errors

For all possible errors, see [Error Response](#error-responses) above.

||**Error Code**||**HTTP Code**||**Description**||
||ResourceNotFound||404||If `user` does not exist or the `alarm` id does not exist.||
||Gone||410||If the `alarm` has been expunged. Closed alarms are expunged after about a week.||

### Example

    $ sdc-amon /pub/bob/alarms/123?action=close -X POST
    HTTP/1.1 202 Accepted
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version
    Access-Control-Expose-Headers: X-Api-Version, X-Request-Id, X-Response-Time
    Server: Amon Master/1.0.0
    X-Request-Id: e16b7aab-b8b8-4a8a-97f2-9216dd0e5798
    Access-Control-Allow-Methods: POST
    Connection: close
    Content-Length: 0
    Date: Mon, 02 Apr 2012 17:15:52 GMT
    X-Response-Time: 3



## ReopenAlarm (POST /pub/:user/alarms/:alarm?action=reopen)

Re-open the given alarm. This exists mainly to provide an "undo" for an
accidental "close" action.

### Inputs

||**Field**||**Type**||**Description**||
||user (in URL)||String||The user UUID (from UFDS) or username ('login' in UFDS)||
||alarm (in URL)||Integer||The alarm id for this user.||
||action||String||"reopen". See other "*Alarm*" actions in this section.||

### Returns

Nothing. Responds with an HTTP 202 (Accepted) on success.

### Errors

For all possible errors, see [Error Response](#error-responses) above.

||**Error Code**||**HTTP Code**||**Description**||
||ResourceNotFound||404||If `user` does not exist or the `alarm` id does not exist.||
||Gone||410||If the `alarm` has been expunged. Closed alarms are expunged after about a week.||

### Example

    $ sdc-amon /pub/bob/alarms/123?action=reopen -X POST
    HTTP/1.1 202 Accepted
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version
    Access-Control-Expose-Headers: X-Api-Version, X-Request-Id, X-Response-Time
    Server: Amon Master/1.0.0
    X-Request-Id: e16b7aab-b8b8-4a8a-97f2-9216dd0e5798
    Access-Control-Allow-Methods: POST
    Connection: close
    Content-Length: 0
    Date: Mon, 02 Apr 2012 17:15:52 GMT
    X-Response-Time: 3



## SuppressAlarmNotifications (POST /pub/:user/alarms/:alarm?action=suppress)

Suppress notifications for events on the given alarm.

### Inputs

||**Field**||**Type**||**Description**||
||user (in URL)||String||The user UUID (from UFDS) or username ('login' in UFDS)||
||alarm (in URL)||Integer||The alarm id for this user.||
||action||String||"suppress". See other "*Alarm*" actions in this section.||

### Returns

Nothing. Responds with an HTTP 202 (Accepted) on success.

### Errors

For all possible errors, see [Error Response](#error-responses) above.

||**Error Code**||**HTTP Code**||**Description**||
||ResourceNotFound||404||If `user` does not exist or the `alarm` id does not exist.||
||Gone||410||If the `alarm` has been expunged. Closed alarms are expunged after about a week.||

### Example

    $ sdc-amon /pub/bob/alarms/123?action=suppress -X POST
    HTTP/1.1 202 Accepted
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version
    Access-Control-Expose-Headers: X-Api-Version, X-Request-Id, X-Response-Time
    Server: Amon Master/1.0.0
    X-Request-Id: e16b7aab-b8b8-4a8a-97f2-9216dd0e5798
    Access-Control-Allow-Methods: POST
    Connection: close
    Content-Length: 0
    Date: Mon, 02 Apr 2012 17:15:52 GMT
    X-Response-Time: 3



## UnsuppressAlarmNotifications (POST /pub/:user/alarms/:alarm?action=unsuppress)

Stop suppression of notifications on the given alarm.

### Inputs

||**Field**||**Type**||**Description**||
||user (in URL)||String||The user UUID (from UFDS) or username ('login' in UFDS)||
||alarm (in URL)||Integer||The alarm id for this user.||
||action||String||"close". See other "*Alarm*" actions in this section.||

### Returns

Nothing. Responds with an HTTP 202 (Accepted) on success.

### Errors

For all possible errors, see [Error Response](#error-responses) above.

||**Error Code**||**HTTP Code**||**Description**||
||ResourceNotFound||404||If `user` does not exist or the `alarm` id does not exist.||
||Gone||410||If the `alarm` has been expunged. Closed alarms are expunged after about a week.||

### Example

    $ sdc-amon /pub/bob/alarms/123?action=unsuppress -X POST
    HTTP/1.1 202 Accepted
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version
    Access-Control-Expose-Headers: X-Api-Version, X-Request-Id, X-Response-Time
    Server: Amon Master/1.0.0
    X-Request-Id: e16b7aab-b8b8-4a8a-97f2-9216dd0e5798
    Access-Control-Allow-Methods: POST
    Connection: close
    Content-Length: 0
    Date: Mon, 02 Apr 2012 17:15:52 GMT
    X-Response-Time: 3



# Master API: Miscellaneous

## Ping (GET /ping)

A simple ping to check to health of the Amon server. Here "pid" is the PID of
the Amon master server process. This is helpful for the test suite.

### Inputs

||**Field**||**Type**||**Description**||
||error||String||Optional. An error code name, e.g. "ResourceNotFound" to simulate an error response.||
||message||String||Optional. The error message to include in the simulated error response. Defaults to "pong".||

### Returns

When not simulating an error response, a "pong" object is returned:

||**Field**||**Type**||**Description**||
||ping||String||"pong"||
||pid||String||The PID of Amon Master process.||

When simulating an error, the HTTP response code depends on the error type
and the response body is an JSON object with:

||**Field**||**Type**||**Description**||
||code||String||Error code string.||
||message||String||Error message.||

### Examples

    $ sdc-amon /ping
    HTTP/1.1 200 OK
    Connection: close
    Date: Wed, 02 Nov 2011 04:40:42 GMT
    Server: Amon Master/1.0.0
    X-Api-Version: 1.0.0
    X-Request-Id: 265a6379-bbf5-4d86-bd11-5e96614035d8
    X-Response-Time: 2
    Content-Length: 15
    Content-MD5: tBwJDpsyo/hcYx2xrziwrw==
    Content-Type: application/json
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Methods: OPTIONS, GET
    Access-Control-Allow-Headers: Accept, Content-Type, Content-Length, Date, X-Api-Version
    Access-Control-Expose-Headers: X-Api-Version, X-Request-Id, X-Response-Time

    {
      "ping": "pong"
      "pid": 1234
    }

Ping can also be used to simulate error responses from Amon master:

    $ sdc-amon /ping?error=ResourceNotFound\&message=nada
    HTTP/1.1 404 Not Found
    Connection: close
    Date: Tue, 06 Dec 2011 23:43:03 GMT
    Server: Amon Master/1.0.0
    X-Api-Version: 1.0.0
    X-Request-Id: 849950cf-e9de-452b-9640-6f4c7da053e2
    X-Response-Time: 2
    Content-Length: 44
    Content-MD5: /vxoedHxPf+L11uaQ8bkJQ==
    Content-Type: application/json
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Methods: OPTIONS, GET
    Access-Control-Allow-Headers: Accept, Content-Type, Content-Length, Date, X-Api-Version
    Access-Control-Expose-Headers: X-Api-Version, X-Request-Id, X-Response-Time

    {
      "code": "ResourceNotFound",
      "message": "nada"
    }



## GetUser (GET /pub/:user)

Get information for the given user. This is not an essential part of
the API, **should NOT be exposed publicly (obviously)**, and can be removed
if not useful.

### Inputs

||user (in URL)||String||The user UUID or login||

### Example

    $ sdc-amon /pub/7b23ae63-37c9-420e-bb88-8d4bf5e30455
    HTTP/1.1 200 OK
    ...

    {
      "login": "hamish",
      "email": "hamish@joyent.com",
      "id": "7b23ae63-37c9-420e-bb88-8d4bf5e30455",
      "firstName": "Hamish",
      "lastName": "MacHamish"
    }


## TestMonitorNotify (POST /pub/:user/monitors/:monitor/testnotify)

Send a test notification for this monitor.

### Inputs

None.

### Example

    $ sdc-amon /pub/admin/monitors/sdczones/testnotify
    [root@headnode (coal:0) ~]# sdc-amon /pub/admin/monitors/sdczones/testnotify -X POST
    HTTP/1.1 200 OK
    Access-Control-Allow-Origin: *
    Access-Control-Allow-Headers: Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version
    Access-Control-Expose-Headers: X-Api-Version, X-Request-Id, X-Response-Time
    Server: Amon Master/1.0.0
    X-Request-Id: 9fb2a9f3-f34d-4261-ac86-985dc376c442
    Access-Control-Allow-Methods: POST
    Connection: close
    Content-Length: 16
    Content-MD5: c2PoX+nt7m8FOksxlYjAhg==
    Content-Type: application/json
    Date: Wed, 07 Mar 2012 09:23:31 GMT
    X-Response-Time: 479

    {
      "success": true
    }



# Relay API

Amon employs a tree of relay servers for (a) ferrying agent probe data
from the master to the agents and (b) ferrying events from agents back to
the master. This is done via the Relay API. The Amon Master also implements
this API.

Dev Note: The module "common/lib/relay-client.js" is used by both amon-relay
and amon-master to speak the Relay API. In production usage the relays
speak to the master over a network socket and agents speak to their relay
over a Unix domain socket (zsocket).


## AddEvents (POST /events)

Sends one or more events up to a relay (or the Amon master). Agents run
the given probes and send an event when a probe test trips/fails.

TODO


## GetAgentProbes (GET /agentprobes)

Amon Relays periodically get agent control data (probes to run on a
particular agent) from the master. From there, agents poll their relay for
this control data.

Note: The returned probes are sorted to ensure a stable order and hence a
stable "Content-MD5" header to use for caching.

### Inputs

||machine||UUID||The machine (VM or SmartMachine, aka zone) for which to return probes.||
||server||UUID||The server GZ for which to return probes.||

Either `machine` or `server` must be specified.

### Returns

An array of probe objects, which contain:

TODO

### Errors

TODO


## HeadAgentProbes (HEAD /agentprobes)

This "HEAD" form of `GetAgentProbes` allows for relays and agents to check
for agent control data changes with less network overhead.

TODO



# Master Configuration

Reference docs on configuration vars to amon-master. Default values are in
"master/factory-settings.json". Custom values are provided in a JSON file
passed in with the "-f CONFIG-FILE-PATH" command-line option.

Note that given custom values override full top-level keys in the factory
settings. For example: if providing 'userCache', one must provide the
whole userCache object.

||port||Port number on which to listen.||
||ufds.url||LDAP URL to connect to UFDS.||
||ufds.rootDn||UFDS root dn.||
||ufds.password||UFDS root dn password.||
||ufds.caching||Boolean indicating if UFDS caching should be enabled. Default true.||
||mapi.url||MAPI client url.||
||mapi.username||MAPI HTTP admin username.||
||mapi.password||MAPI HTTP admin password.||
||redis.host||Redis server host or IP. Defaults to 127.0.0.1 if not given.||
||redis.port||Redis server port. Defaults to 6379 if not given.||
||userCache.size||The number of entries to cache.||
||userCache.expiry||The number of seconds for which cache entries are valid.||
||notificationPlugins||An object defining all notification mechanisms. This is a mapping of plugin name, e.g. "email" or "sms", to plugin data.||
||notificationPlugins.NAME.path||A node `require()` path from which the Amon master can load the plugin module, e.g. "./lib/twillio".||
||notificationPlugins.NAME.config||An object with instance data for the plugin.||



# Probe Types

## Probe: logscan

Watch (tail -f) a log file for a particular pattern (regular expression).

### Config

||**Parameter**||**Required?**||**Default**||**Description**||
||path||Required||-||Path to the log file to watch.||
||regex||Required||-||Regular expression pattern to match against each log line.||
||period||Optional||60||Integer number of seconds. Time window in which `threshold` number of matches must be found to alarm.||
||threshold||Optional||1||Integer. Number of times a match must be found within `period` to alarm.||

### Example

    $ sdc-amon /pub/bob/monitors/mymonitor/probes/myservice -X PUT --data '{
        "type": "logscan",
        "machine": "444d70d5-0187-e5d4-468f-7b49a6b014ff",
        "config": {
            "path": "/var/log/myservice.log",
            "regex": "ERROR",
            "threshold": 1,
            "period": 60
        }
    }'

## Probe: machine-up

Watch for a machine (i.e. a virtual machine) going up or down. Alarms for
this probe will "clear", i.e. an alarm created for a machine going down
will be automatically closed by the event sent when the machine comes back
up.

### Config

None.

### Example

    $ sdc-amon /pub/bob/monitors/mymonitor/probes/mywebhead -X PUT --data '{
        "type": "machine-up",
        "machine": "a5134e62-1bed-5e48-a760-7b9b79aef729"
    }'

## Probe: http

Watches a HTTP(S) URL for a specific body (regex), or status codes.

### Config

||**Parameter**||**Required?**||**Default**||**Description**||
||url||Required||-||URL to probe, this url must be accessable from the machine or server running the probe||
||method||Optional||GET||Curently Supports GET (default) or POST||
||headers||Optional||-||Additional headers to include with request (an object)||
||body||Optional||-||string of form data||
||username||Optional||-||Username used for HTTP Basic Auth||
||password||Optional||-||Password used for HTTP Basic Auth||
||interval||Optional||90||interval in seconds to check the specified URL||
||period||Optional||300||Integer number of seconds. Time window in which `threshold` number of matches must be found to alarm.||
||threshold||Optional||1||Integer. Number of times a match must be found within `period` to alarm.||
||maxResponseTime||Optional||-||When response time (ms) exceeds `maxResponseTime`, an event will fire||
||timeout||Optional||30||Maximum time in seconds that you allow the connection to the server to take.||
||regex.pattern||Optional||-||check the response body for the regex pattern, if there are no matches, an event is fired||
||regex.flags||Optional||-||flags to use with `regex.pattern` (ie `g` for global matching, `i` to ignore case sensitivity||
||statusCodes||Optional||[200,201,202,204]||an array of status codes to be compared to the response, if statusCodes does not contain include the response status code form the request, then an alarm is fired||

### Example

Watches http://google.com/ home page and fire when a non 2xx status code is returned

    $ sdc-amon /pub/bob/monitors/mymonitor/probes/googleprobe -X PUT --data '{
        "type": "http",
        "machine": "a5134e62-1bed-5e48-a760-7b9b79aef729",
        "config":{
          "url":"http://google.com/"
        }
    }'


# Glossary

- A **monitor** is a the main conceptual object that is configured by operators
  and customers using Amon. It includes the details for what checks to
  run and, when a check trips, who and how to notify ("contacts").
- A **probe** is a single thing to check (the atom of physical monitoring
  done by the Amon agents). E.g. "Check the running state of zone X." "Check
  for 3 occurrences of 'ERROR' in 'foo.log' in zone X within 1 minute." A
  monitor includes one or more probes.
- An **event** is a message sent from an Amon agent up to the Amon master that
  might create or update an alarm.
- An open **alarm** is the state of a failing monitor. An alarm is created
  when a monitor trips (i.e. one of its probes detects a fault). An alarm can
  be closed by user action (via the API or in the Operator or User Portals)
  or via an Amon *clear* event -- the failing state is no longer failing,
  e.g. a halted machine has come back up. An alarm object lives until it is
  closed.
- A **notification** is a message sent for an alarm to one or more contacts
  associated with that monitor. An alarm may result in many notifications
  through its lifetime.



# Use Cases

Some Amon use cases to guide its design and to demonstrate how to use
Amon. **Dev Note: Current Amon doesn't support all these use cases yet.**

In the examples below "otto" is an operator account commonly used
in dev work on Amon, "564d70d5-0187-e5d4-468f-7b49a6b014ff" is the headnode
UUID, etc.



## 1. Operator SDC Log Monitor

Probes for watching relevant SDC log files for, say, "ERROR".

    sdc-amon /pub/otto/monitors/sdclogs -X PUT -d- < '{
        "contacts": ["email"]
    }'

    # GZ probes
    sdc-amon /pub/otto/monitors/sdclogs/probes/headnode-ur -X PUT -d- < '{
        "type": "logscan",
        "server": "564d70d5-0187-e5d4-468f-7b49a6b014ff",
        "config": {
            "path": "/var/svc/log/smartdc-agent-ur:default.log",
            "regex": "ERROR",
            "threshold": 1,
            "period": 60
        }
    }'
    # Or perhaps a specialized probe "smf-logscan" type for SMF logs.
    sdc-amon /pub/otto/monitors/sdclogs/probes/headnode-heartbeater -X PUT -d- < '{
        "type": "smf-logscan",
        "server": "564d70d5-0187-e5d4-468f-7b49a6b014ff",
        "config": {
            "fmri": "svc:/smartdc/agent/heartbeater:default",
            "regex": "ERROR",
            "threshold": 1,
            "period": 60
        }
    }'
    ...

    # SDC zones probes
    # Where 'ea3898cd-4ca9-410a-bfa6-0152ba07b1d7' is the ufds0 zone name.
    sdc-amon /pub/otto/monitors/sdclogs/probes/ufds0-ufds-server -X PUT -d- < '{
        "type": "logscan",
        "machine": "ea3898cd-4ca9-410a-bfa6-0152ba07b1d7",
        "config": {
            "path": "/var/log/ufds/server.log",
            "regex": "ERROR",
            "threshold": 1,
            "period": 60
        }
    }'
    ...



## 2. Operator SDC Zones monitor

Probe for SDC zones going up and down. Separate from "SDC Log monitor"
because zone up/down alarms can clear.
See <https://stuff.joyent.us/stuff/trent/screencasts/amon1.mov> for a
screencast demonstrating this use case.

    echo '{
        "contacts": ["email"]
    }' | sdc-amon /pub/SOME-OPERATOR/monitors/sdczones -X PUT -d @-

    # Where 'ea3898cd-4ca9-410a-bfa6-0152ba07b1d7' is the ufds0 zone name.
    echo '{
        "type": "machine-up",
        "machine": "ea3898cd-4ca9-410a-bfa6-0152ba07b1d7"
    }' | sdc-amon /pub/SOME-OPERATOR/monitors/sdczones/probes/ufds0 -X PUT -d @-

    # ... one for each sdc zone (sdc-mapi /machines?tag.smartdc_role=*)
    # See "sdczones.sh" in <https://stuff.joyent.us/stuff/trent/screencasts/amon1-notes.txt>



## 3. Operator SDC Services monitor

Probe for SDC zones' and GZ's "smartdc" services going up/down.

    PUT /my/monitors/services < {
            "contacts": ["email"]
        }
    PUT /my/monitors/services/probes/$machine_alias-$fmri_nickname < {
            "type": "smf",
            "machine": "$machine_uuid",
            "config": {
                "fmri": "$fmri"
            }
        }
    PUT /my/monitors/services/probes/$headnode_hostname-$fmri_nickname < {
            "type": "smf",
            "server": "$compute_node_uuid",
            "config": {
                "fmri": "$fmri"
            }
        }

For example:

    sdc-amon /pub/otto/monitors/sdcservices -X PUT -d- < '{
        "contacts": ["email"]
    }'
    # Where '564d70d5-0187-e5d4-468f-7b49a6b014ff' is my headnode UUID.
    sdc-amon /pub/otto/monitors/sdcservices/probes/headnode-smartlogin -X PUT -d- < '{
        "type": "smf",
        "server": "564d70d5-0187-e5d4-468f-7b49a6b014ff",
        "config": {
            "fmri": "svc:/smartdc/agent/smartlogin:default"
        }
    }'
    ...
    # Where 'ea3898cd-4ca9-410a-bfa6-0152ba07b1d7' is the ufds0 zone name.
    sdc-amon /pub/otto/monitors/sdcservices/probes/ufds0-ufds-capi -X PUT -d- < '{
        "type": "smf",
        "machine": "ea3898cd-4ca9-410a-bfa6-0152ba07b1d7",
        "config": {
            "fmri": "svc:/smartdc/agent/smartlogin:default"
        }
    }'
    ...


## 4. Customer "Machine up" monitor

Probe for each of my machines going up and down.

Portal UX: This monitor is likely often wanted for *all* my zones.
However, don't want it on by default. Should portal's page after
"create new machine" have a big button (or a checkbox) to add this
monitor for this zone. Nice to have would be to offer checkboxes for
all monitors on existing zones: "You have monitor A on (some of) your
other machines. Would you like it on this one too?" Should portal add
a separate monitor? Or add a probe (or probes?) to the same monitor?
Probably another probe to the same monitor. Naming (of probe or
monitor) will be a pain, need to include machine UUID in the name?

Cloud API: You have to add these separately per-machine. That shouldn't
be so bad.

    PUT /my/monitors/machine-up < {
            "contacts": ["email"]
        }
    PUT /my/monitors/machine-up/probes/$machine_uuid < {
            "type": "machinedown",
            "machine": "$machine_uuid"
        }


## 5. Customer "Site up" monitor

Probe to "GET /canary" on the site from some other source location.

    PUT /my/monitors/site < {
            "contacts": ["email"]
        }
    PUT /my/monitors/site/probes/webcheck < {
            "machine": "$machine_uuid",  // <--- this is the machine to run HTTP request from
            "type": "http",
            "config": {
                "url": "http://example.com/canary.html",
                "method": "GET",
                "statusCodes": [200,201,204,401] // number or list of HTTP status numbers to expect
                "regex": "...", // (optional) check for a pattern in returned content
                "interval": 60,  // how often to check (in seconds),
                "period": 300, // alert window
                "threshold": 1 // # of times event must occur within the alert window before alarming
            }
        }


## 6. Operator `mdb -k` goober

Operator wants to run a particular "mdb -k" goober (Bryan's words) to run a
healthcheck on KVM.

    PUT /my/monitors/kvmcheck < {
            "contacts": ["email"]
        }
    PUT /my/monitors/kvmcheck/probes/foo < {
            "type": "mdbkernel",
            "machine": "$machine_uuid",
            "runInGlobal": true,   // must be operator to set this
            "config": {
                // This is essential wide open. That command can presumably
                // do anything.
                "command": ...,
                "regex": "...",   // check for a pattern in returned content?
                // Something to check exit value?
                "interval": 60  // how frequently to check.
            }
        }
