---
title: Amon Design Discussions
markdown2extras: wiki-tables, cuddled-lists
apisections:
---

# Amon Design Discussions

**This is a Joyent internal document.** Here-in some design discussions for
Amon, collected here because they might be helpful to understand why Amon
is the way it is. Each section is dated to give context if reading this
in the future when Amon design might have moved on. *Add new sections to
the top.*


# maintenance windows (20-Apr-2012)

For now see "Notes: maintenance windows" section in TODO.txt.



# alarm clearing (2-Apr-2012)

Some alarms can be automatically closed by a probe event (a "clear" event).
This is also called clearing an alarm. For example, a "machine-up" probe
on a machine will send a "clear" event.

Clearing alarms is a little more complicated than just closing the alarm when
an event is attached, because a "clear" is for a particular probe type and
machine and a monitor can have multiple probes. Therefore an alarm needs to
track the current set of outstanding "faults". I'm intentionally using a
name other than "probes" because probe instances may change on a monitor
over the lifetime of an alarm.

A **fault** is `(<machine|server>,  MACHINE-OR-SERVER-UUID, PROBE-TYPE)`
3-tuple. (Actually probably represented with a JS object. In the general case
we might need to add a "PROBE-INSTANCE-CONFIG" item there, but I'm not
crossing that road until we have a clearable probe-type with config
information.)

An alarm will maintain a set of current outstanding faults. On receiving a
"clear" event, if the last outstanding fault is removed, then the alarm
will be closed.


# webhook contact (30-Mar-2012)

This discussion stems from <https://devhub.joyent.com/jira/browse/MON-97>

First a discussion of using webhook contacts (notification types) with the
current Amon design that all contact info lives as fields on the UFDS
sdcPerson entry.


## scenario A

Machines in two datacenters. Want all your monitors (you have 10)
to hit your issue tracker webhook (or PagerDuty or whatever):
<https://issues.example.com/collect>. Call it "issuesWebhook", i.e. there
is a "issuesWebhook: https://issues.example.com/collect" entry on your
"sdcPerson" in UFDS.

You have another webhook endpoint that you want one monitor to hit (you are
playing with this new monitor and hook). Your play webhook is about
collecting stats. You'd need to create a "statsWebhook" (or whatever name
ending in "webhook", case insensitive) on your user account, then put
"statsWebhook" in the monitor "contacts" array.

What would the UI look like for this? Click "Add a Monitor" or
"Edit Monitor" button to add this contact. The "Edit Monitor" UI shows a
listbox with current contacts:

    Name:       [mymonitor       ]

    Contacts:
    +--------------------------------------------+
    | email: trentm@gmail.com (email)            |
    |                                            |
    |                                            |
    +--------------------------------------------+
    <Add...> <Edit...> <Remove...>

Clicking "Add..." would pop up a modal dialog (or a separate page, or a
sheet):

    -------- Add a monitor contact --------

    **Use an existing contact:**

    Contact:    [ ] email: trentm@gmail.com (email)
                [ ] email: trent.mick@joyent.com (secondaryEmail)
                [ ] webhook: https://issues.example.com/collect (issuesWebhook)

    <<Use Selected Contacts>>


    **Or create a new contact:**

    Type:       [ webhook   [v]]               <---- menulist
    Name:       [ stats        ]               <---- text field
    URL:        [ http://user@pass:stats.example.com/collect ]

    <<Create and select this contact>>

If using the "Or create a new contact" option, this would add a "statsWebhook"
field on the UFDS sdcPerson, then add that new contact to mymonitor's list.

Pros:
- centralized contact info allows re-use in separate data centers
- centralized contact info allows one to update, e.g. your email, *once*
  and have that take effect for all your Amon monitors
- Having the contact info on the sdcPerson means that Amon naturally uses
  the "email" field already managed there. Perhaps this will also be true
  for an existing phone number field for SMS notifications.

Cons:
- Having to specify a "Name:" for a new contact is a bit surprising to the
  user. Also, realistically that name has to be restricted to no spaces
  (and no funny chars) to enable using it as an ldap field.


## put webhook contact info on the monitor

Let's explore a design change in allowing contact info to be on the monitor,
for webhooks at least as currently expressed in
<https://devhub.joyent.com/jira/browse/MON-97>

You'd have a monitor something like this:

    {
        "name": "mymonitor",
        "contacts": [
            "email",
            {
                "type": "webhook",
                "url": "http://stats.example.com/collect"
            }
        ]
    }

Pros:
- You don't have to name the contact.
- Useful for one-offs. I.e. just trying something out.

Cons:
- We'd still want the "centrally named contacts" to support re-use of contacts.
  You wouldn't want to have to repeat that webhook URL for each of your
  100 monitors. This is a "con" then, because we'd have a "second way" to
  do it. This would imply some changes to the UI I mocked up above:
  separating the actions of adding named contacts (we'd want a "Manage
  Contacts" UI anyway) and selecting contacts for a monitor. Perhaps that
  wouldn't be so bad.
